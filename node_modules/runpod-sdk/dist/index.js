var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;
    function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }
    function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
import axios from "axios";
import { curry, clamp, isNil } from "ramda";
var getAuthHeader = function (apiKey) { return ({
    headers: {
        "Authorization": "Bearer ".concat(apiKey),
        "content-type": "application/json",
    },
}); };
var print = console.log;
var handleErrors = function (axiosRequest) { return __awaiter(void 0, void 0, void 0, function () {
    var resp, status, statusText;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, axiosRequest];
            case 1:
                resp = _a.sent();
                status = resp.status, statusText = resp.statusText;
                if (status !== 200) {
                    return [2 /*return*/, { status: status, statusText: statusText }];
                }
                return [2 /*return*/, resp.data];
        }
    });
}); };
var handleErrorsStatus = function (axiosRequest) { return __awaiter(void 0, void 0, void 0, function () {
    var resp, status, statusText;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, axiosRequest];
            case 1:
                resp = _a.sent();
                status = resp.status, statusText = resp.statusText;
                if (status !== 200) {
                    return [2 /*return*/, { status: status, statusText: statusText, started: false }];
                }
                return [2 /*return*/, __assign(__assign({}, resp.data), { started: true, completed: isCompleted(resp.data.status), succeeded: resp.data.status === "COMPLETED" })];
        }
    });
}); };
export var runpodServerlessBaseUrlProd = "https://api.runpod.ai/v2";
export var runpodServerlessBaseUrlDev = "https://dev-api.runpod.ai/v2";
var getEndpointUrl = curry(function (baseUrl, endpointId) { return "".concat(baseUrl, "/").concat(endpointId); });
var isCompleted = function (status) {
    return ["COMPLETED", "FAILED", "CANCELLED", "TIMED_OUT"].includes(status);
};
//run and then poll status
export var runSync = curry(function (baseUrl, apiKey, endpointId, request, timeout) {
    if (timeout === void 0) { timeout = 90000; }
    return __awaiter(void 0, void 0, void 0, function () {
        var startTime, getRemainingTime, runResp, data, id, start;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    startTime = Date.now();
                    getRemainingTime = function () { return clamp(1000, 90000, timeout - (Date.now() - startTime)); };
                    return [4 /*yield*/, runsync(baseUrl, apiKey, endpointId, request, timeout)];
                case 1:
                    runResp = _a.sent();
                    data = __assign({}, runResp);
                    id = data.id;
                    start = Date.now();
                    _a.label = 2;
                case 2:
                    if (!!isCompleted(data.status)) return [3 /*break*/, 4];
                    if (Date.now() - start > timeout) {
                        print("".concat(id, " timed out after ").concat(timeout / 1000, " seconds"));
                        return [2 /*return*/, __assign(__assign({}, data), { started: true, completed: false })];
                    }
                    return [4 /*yield*/, statusSync(baseUrl, apiKey, endpointId, id, getRemainingTime())];
                case 3:
                    data = _a.sent();
                    print("".concat(id, ": ").concat(data.status));
                    return [3 /*break*/, 2];
                case 4: return [2 /*return*/, __assign(__assign({}, data), { started: true, completed: true, succeeded: data.status === "COMPLETED" })];
            }
        });
    });
});
//wrapper over /status-sync
var statusSync = curry(function (baseUrl, apiKey, endpointId, requestId, timeout) {
    if (timeout === void 0) { timeout = 90000; }
    var wait = clamp(1000, 90000, timeout);
    var url = getEndpointUrl(baseUrl, endpointId) + "/status-sync/" + requestId + "?wait=".concat(wait);
    var authHeader = getAuthHeader(apiKey);
    return handleErrorsStatus(axios.get(url, __assign({}, authHeader)));
});
//wrapper over /runsync
var runsync = curry(function (baseUrl, apiKey, endpointId, request, timeout) {
    if (timeout === void 0) { timeout = 90000; }
    var wait = clamp(1000, 90000, timeout);
    var url = getEndpointUrl(baseUrl, endpointId) + "/runsync" + "?wait=".concat(wait);
    var authHeader = getAuthHeader(apiKey);
    return handleErrorsStatus(axios.post(url, request, __assign({}, authHeader)));
});
//wrapper over /run
export var run = curry(function (baseUrl, apiKey, endpointId, request, timeout) {
    if (timeout === void 0) { timeout = 3000; }
    var url = getEndpointUrl(baseUrl, endpointId) + "/run";
    var authHeader = getAuthHeader(apiKey);
    return handleErrors(axios.post(url, request, __assign(__assign({}, authHeader), { timeout: timeout })));
});
//wrapper over /status
export var status = curry(function (baseUrl, apiKey, endpointId, requestId, timeout) {
    if (timeout === void 0) { timeout = 3000; }
    var url = getEndpointUrl(baseUrl, endpointId) + "/status/" + requestId;
    var authHeader = getAuthHeader(apiKey);
    return handleErrorsStatus(axios.get(url, __assign(__assign({}, authHeader), { timeout: timeout })));
});
//generator yielding results of stream
export function stream(baseUrl, apiKey, endpointId, requestId, timeout) {
    if (timeout === void 0) { timeout = 0; }
    return __asyncGenerator(this, arguments, function stream_1() {
        var completed, start, url, authHeader, resp, _i, _a, output;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    completed = false;
                    start = Date.now();
                    _b.label = 1;
                case 1:
                    if (!!completed) return [3 /*break*/, 8];
                    url = getEndpointUrl(baseUrl, endpointId) + "/stream/" + requestId;
                    authHeader = getAuthHeader(apiKey);
                    return [4 /*yield*/, __await(handleErrors(axios.get(url, authHeader)))];
                case 2:
                    resp = _b.sent();
                    if (timeout !== 0 && Date.now() - start > timeout) {
                        print("stream timed out after ".concat(timeout / 1000, " seconds"));
                        completed = true;
                    }
                    if (isCompleted(resp.status)) {
                        completed = true;
                    }
                    _i = 0, _a = resp === null || resp === void 0 ? void 0 : resp.stream;
                    _b.label = 3;
                case 3:
                    if (!(_i < _a.length)) return [3 /*break*/, 7];
                    output = _a[_i];
                    return [4 /*yield*/, __await(output)];
                case 4: return [4 /*yield*/, _b.sent()];
                case 5:
                    _b.sent();
                    _b.label = 6;
                case 6:
                    _i++;
                    return [3 /*break*/, 3];
                case 7: return [3 /*break*/, 1];
                case 8: return [2 /*return*/];
            }
        });
    });
}
//wrapper over /cancel
var cancel = curry(function (baseUrl, apiKey, endpointId, requestId, timeout) {
    if (timeout === void 0) { timeout = 3000; }
    var url = getEndpointUrl(baseUrl, endpointId) + "/cancel/" + requestId;
    var authHeader = getAuthHeader(apiKey);
    return handleErrors(axios.post(url, {}, __assign(__assign({}, authHeader), { timeout: timeout })));
});
//wrapper over /health
export var health = curry(function (baseUrl, apiKey, endpointId, timeout) {
    if (timeout === void 0) { timeout = 3000; }
    var url = getEndpointUrl(baseUrl, endpointId) + "/health";
    var authHeader = getAuthHeader(apiKey);
    return handleErrors(axios.get(url, __assign(__assign({}, authHeader), { timeout: timeout })));
});
//wrapper over /purge-queue
export var purgeQueue = curry(function (baseUrl, apiKey, endpointId, timeout) {
    if (timeout === void 0) { timeout = 3000; }
    var url = getEndpointUrl(baseUrl, endpointId) + "/purge-queue";
    var authHeader = getAuthHeader(apiKey);
    return handleErrors(axios.post(url, {}, __assign(__assign({}, authHeader), { timeout: timeout })));
});
var Endpoint = /** @class */ (function () {
    function Endpoint(baseUrl, apiKey, endpointId) {
        this.endpointId = "";
        this.baseUrl = runpodServerlessBaseUrlProd;
        this.apiKey = "";
        this.baseUrl = baseUrl;
        this.apiKey = apiKey;
        this.endpointId = endpointId;
    }
    Endpoint.prototype.runSync = function (request, timeout) {
        if (timeout === void 0) { timeout = 90000; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, runSync(this.baseUrl, this.apiKey, this.endpointId, request, timeout)];
            });
        });
    };
    Endpoint.prototype.run = function (request, timeout) {
        if (timeout === void 0) { timeout = 3000; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, run(this.baseUrl, this.apiKey, this.endpointId, request, timeout)];
            });
        });
    };
    Endpoint.prototype.status = function (requestId, timeout) {
        if (timeout === void 0) { timeout = 3000; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, status(this.baseUrl, this.apiKey, this.endpointId, requestId, timeout)];
            });
        });
    };
    Endpoint.prototype.statusSync = function (requestId, timeout) {
        if (timeout === void 0) { timeout = 90000; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, statusSync(this.baseUrl, this.apiKey, this.endpointId, requestId, timeout)];
            });
        });
    };
    //default to no timeout
    Endpoint.prototype.stream = function (requestId, timeout) {
        if (timeout === void 0) { timeout = 0; }
        return stream(this.baseUrl, this.apiKey, this.endpointId, requestId, timeout);
    };
    Endpoint.prototype.cancel = function (requestId, timeout) {
        if (timeout === void 0) { timeout = 3000; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, cancel(this.baseUrl, this.apiKey, this.endpointId, requestId, timeout)];
            });
        });
    };
    Endpoint.prototype.health = function (timeout) {
        if (timeout === void 0) { timeout = 3000; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, health(this.baseUrl, this.apiKey, this.endpointId, timeout)];
            });
        });
    };
    Endpoint.prototype.purgeQueue = function (timeout) {
        if (timeout === void 0) { timeout = 3000; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, purgeQueue(this.baseUrl, this.apiKey, this.endpointId, timeout)];
            });
        });
    };
    return Endpoint;
}());
var defaultSdkOptions = {
    baseUrl: runpodServerlessBaseUrlProd,
};
var RunpodSdk = /** @class */ (function () {
    function RunpodSdk(apiKey, options) {
        var _a;
        this.apiKey = "";
        this.baseUrl = runpodServerlessBaseUrlProd;
        if (isNil(apiKey)) {
            print("Api key not supplied");
            return;
        }
        this.apiKey = apiKey;
        this.baseUrl = (_a = options.baseUrl) !== null && _a !== void 0 ? _a : this.baseUrl;
    }
    RunpodSdk.prototype.endpoint = function (endpointId) {
        if (isNil(endpointId)) {
            print("Endpoint id not supplied");
            return null;
        }
        return new Endpoint(this.baseUrl, this.apiKey, endpointId);
    };
    return RunpodSdk;
}());
export default (function (apiKey, options) {
    if (options === void 0) { options = defaultSdkOptions; }
    return new RunpodSdk(apiKey, options);
});
//# sourceMappingURL=index.js.map